using System;
using System.Collections.Generic;
using System.Data;
using System.Data.Entity;
using System.Linq;
using System.Net;
using System.Web;
using System.Web.Mvc;
using BJProduction.Migrations;
using BJProduction.Models;
using Microsoft.AspNet.Identity;
using Microsoft.AspNet.Identity.Owin;

namespace BJProduction.Controllers
{

    public class Sales_OrderController : Controller
    {

        public Sales_OrderController()
        {

        }
        public Sales_OrderController(ApplicationUserManager userManager,
            ApplicationRoleManager roleManager)
        {
            UserManager = userManager;
        }

        private ApplicationUserManager _userManager;
        public ApplicationUserManager UserManager
        {
            get
            {
                return _userManager ?? HttpContext.GetOwinContext().GetUserManager<ApplicationUserManager>();
            }
            set
            {
                _userManager = value;
            }
        }

        private ApplicationDbContext db = new ApplicationDbContext();

        // GET: Sales_Order
        public ActionResult Index()
        {
            var sales_Order = db.Sales_Order.Include(s => s.Company).Include(s => s.Customer).Include(s => s.Feature).Include(s => s.Location).Include(s => s.Product_Type).Include(s => s.Unit_Measurement);
            return View(sales_Order.ToList());
        }

        // GET: Sales_Order/Details/5
        public ActionResult Details(int? id)
        {
            if (id == null)
            {
                return new HttpStatusCodeResult(HttpStatusCode.BadRequest);
            }
            Sales_Order sales_Order = db.Sales_Order.Find(id);
            if (sales_Order == null)
            {
                return HttpNotFound();
            }
            return View(sales_Order);
        }

        // GET: Sales_Order/Create
        public ActionResult Create()
        {
            ViewBag.Companyid = new SelectList(db.Companies, "Id", "Company_Name");
            ViewBag.Customerid = new SelectList(db.Customers, "id", "name");
            ViewBag.Featureid = new SelectList(db.Features, "id", "feature_name");
            ViewBag.Locationid = new SelectList(db.Locations.Include(l => l.Location_Type).Where(l => l.Location_Type.name == "Country"), "id", "name");
            ViewBag.Product_Typeid = new SelectList(db.Product_Type, "id", "type_name");
            ViewBag.Unit_Measurementid = new SelectList(db.Unit_Measurement, "id", "code");
            return View();
        }

        // POST: Sales_Order/Create
        // To protect from overposting attacks, enable the specific properties you want to bind to, for 
        // more details see https://go.microsoft.com/fwlink/?LinkId=317598.
        [HttpPost]
        [ValidateAntiForgeryToken]
        public ActionResult Create([Bind(Include = "id,Companyid,Customerid,Product_Typeid,qty,Featureid,sale_count,Unit_Measurementid,Locationid,order_no,sell_date,status,chged_by,chgd_date")] Sales_Order sales_Order)
        {
            if (ModelState.IsValid)
            {
                db.Sales_Order.Add(sales_Order);
                db.SaveChanges();
                return RedirectToAction("Index");
            }

            ViewBag.Companyid = new SelectList(db.Companies, "Id", "Company_Code", sales_Order.Companyid);
            ViewBag.Customerid = new SelectList(db.Customers, "id", "code", sales_Order.Customerid);
            ViewBag.Featureid = new SelectList(db.Features, "id", "feature_code", sales_Order.Featureid);
            ViewBag.Locationid = new SelectList(db.Locations, "id", "name", sales_Order.Locationid);
            ViewBag.Product_Typeid = new SelectList(db.Product_Type, "id", "type_code", sales_Order.Product_Typeid);
            ViewBag.Unit_Measurementid = new SelectList(db.Unit_Measurement, "id", "code", sales_Order.Unit_Measurementid);
            return View(sales_Order);
        }

        // GET: Sales_Order/Edit/5
        public ActionResult Edit(int? id)
        {
            if (id == null)
            {
                return new HttpStatusCodeResult(HttpStatusCode.BadRequest);
            }
            Sales_Order sales_Order = db.Sales_Order.Find(id);
            if (sales_Order == null)
            {
                return HttpNotFound();
            }
            ViewBag.Companyid = new SelectList(db.Companies, "Id", "Company_Code", sales_Order.Companyid);
            ViewBag.Customerid = new SelectList(db.Customers, "id", "code", sales_Order.Customerid);
            ViewBag.Featureid = new SelectList(db.Features, "id", "feature_code", sales_Order.Featureid);
            ViewBag.Locationid = new SelectList(db.Locations, "id", "name", sales_Order.Locationid);
            ViewBag.Product_Typeid = new SelectList(db.Product_Type, "id", "type_code", sales_Order.Product_Typeid);
            ViewBag.Unit_Measurementid = new SelectList(db.Unit_Measurement, "id", "code", sales_Order.Unit_Measurementid);
            return View(sales_Order);
        }

        // POST: Sales_Order/Edit/5
        // To protect from overposting attacks, enable the specific properties you want to bind to, for 
        // more details see https://go.microsoft.com/fwlink/?LinkId=317598.
        [HttpPost]
        [ValidateAntiForgeryToken]
        public ActionResult Edit([Bind(Include = "id,Companyid,Customerid,Product_Typeid,qty,Featureid,sale_count,Unit_Measurementid,Locationid,order_no,sell_date,status,chged_by,chgd_date")] Sales_Order sales_Order)
        {
            if (ModelState.IsValid)
            {
                db.Entry(sales_Order).State = EntityState.Modified;
                db.SaveChanges();
                return RedirectToAction("Index");
            }
            ViewBag.Companyid = new SelectList(db.Companies, "Id", "Company_Code", sales_Order.Companyid);
            ViewBag.Customerid = new SelectList(db.Customers, "id", "code", sales_Order.Customerid);
            ViewBag.Featureid = new SelectList(db.Features, "id", "feature_code", sales_Order.Featureid);
            ViewBag.Locationid = new SelectList(db.Locations, "id", "name", sales_Order.Locationid);
            ViewBag.Product_Typeid = new SelectList(db.Product_Type, "id", "type_code", sales_Order.Product_Typeid);
            ViewBag.Unit_Measurementid = new SelectList(db.Unit_Measurement, "id", "code", sales_Order.Unit_Measurementid);
            return View(sales_Order);
        }

        // GET: Sales_Order/Delete/5
        public ActionResult Delete(int? id)
        {
            if (id == null)
            {
                return new HttpStatusCodeResult(HttpStatusCode.BadRequest);
            }
            Sales_Order sales_Order = db.Sales_Order.Find(id);
            if (sales_Order == null)
            {
                return HttpNotFound();
            }
            return View(sales_Order);
        }

        // POST: Sales_Order/Delete/5
        [HttpPost, ActionName("Delete")]
        [ValidateAntiForgeryToken]
        public ActionResult DeleteConfirmed(int id)
        {
            Sales_Order sales_Order = db.Sales_Order.Find(id);
            db.Sales_Order.Remove(sales_Order);
            db.SaveChanges();
            return RedirectToAction("Index");
        }

        public JsonResult GetFormData(string[] cpl)
        {
            int companyId = Convert.ToInt32(cpl[0]);
            string salesOrder = cpl[1];
            string lotNumber = cpl[2];
            string[] messages = new string[2];


            if (db.Sales_Ledger.Include(x => x.Sales_Order).Where(x => x.lot_number == lotNumber && x.Sales_Order.order_no == salesOrder && x.Sales_Order.Companyid == companyId && x.status == "C").ToList().Count != 0)
            {
                messages[0] = "C";
                if (db.Sales_Order.Where(x => x.order_no == salesOrder && x.Companyid == companyId && x.status == "C").ToList().Count != 0)
                {
                    messages[1] = "C";
                }
                else
                {
                    messages[1] = "N";
                }
                return Json(messages, JsonRequestBehavior.AllowGet);
            }
            else if (db.Sales_Ledger.Include(x => x.Sales_Order).Where(x => x.lot_number == lotNumber && x.Sales_Order.order_no == salesOrder && x.Sales_Order.Companyid == companyId).ToList().Count != 0)
            {
                messages[0] = "F";
                if (db.Sales_Order.Where(x => x.order_no == salesOrder && x.Companyid == companyId && x.status == "C").ToList().Count != 0)
                {
                    messages[1] = "C";
                }
                else
                {
                    messages[1] = "N";
                }
                var salesOrders = db.Sales_Order.Where(x => x.order_no == salesOrder && x.Companyid == companyId).ToList();
                var productAndSalesLedger = db.Sales_Ledger.Include(x => x.Product).Include(x => x.Sales_Order).Where(x => x.lot_number == lotNumber && x.Sales_Order.order_no == salesOrder).ToList();
                var productId = db.Sales_Ledger.Include(y => y.Product).Include(y => y.Sales_Order).FirstOrDefault(y => y.lot_number == lotNumber).Productid;
                var productFeature = db.Product_Feature.Include(x => x.Feature).Where(x => x.Productid == productId).ToList();
                var warehouseId = db.Sales_Ledger.Include(x => x.Sales_Order).FirstOrDefault(x => x.lot_number == lotNumber && x.Sales_Order.order_no == salesOrder).Locationid;
                var warehouse = db.Locations.Where(x => x.id == warehouseId);
                var orderData = new dynamic[] { messages, salesOrders, productAndSalesLedger, productFeature, warehouse };
                return Json(orderData, JsonRequestBehavior.AllowGet);
            }

            else
            {
                messages[0] = "N";
                if (db.Sales_Order.Where(x => x.order_no == salesOrder && x.Companyid == companyId && x.status == "C").ToList().Count != 0)
                {
                    messages[1] = "C";
                }
                else
                {
                    messages[1] = "N";
                }
                return Json(messages, JsonRequestBehavior.AllowGet);
            }

        }

        [Authorize]
        [HttpPost]
        public JsonResult SaveData(string[][][] values)
        {
            // Remove and Save SalesProductFeatures
            var orderNo = values[0][8][0];
            var lotNumber = values[0][15][0];
            var companyId = Convert.ToInt32(values[0][0][0]);
            int productTypeId = Convert.ToInt32(values[0][2][0]);
            int wareHouseId = Convert.ToInt32(values[0][14][0]);


            var SalesProductFeaatures = db.SalesProductFeatures.Where(x =>
                x.OrderNo == orderNo && x.CompanyId == companyId && x.LotNumber == lotNumber);
            db.SalesProductFeatures.RemoveRange(SalesProductFeaatures);
            db.SaveChanges();

            var salesorderId = db.Sales_Ledger.Include(x => x.Sales_Order).Where(x =>
                    x.lot_number == lotNumber && x.Locationid == wareHouseId && x.Sales_Order.order_no == orderNo && x.Sales_Order.Companyid==companyId)
                .ToList();
            if (salesorderId.Count != 0)
            {
                var id = salesorderId.FirstOrDefault().Sales_Orderid;
                var SalesLedger = db.Sales_Ledger.Where(x =>
                    x.Sales_Orderid == id && x.Locationid == wareHouseId && x.lot_number == lotNumber).ToList();

                db.Sales_Ledger.RemoveRange(SalesLedger);
                db.SaveChanges();
            }


            
            for (int i = 0; i < values[1].Length; i++)
            {
                SalesProductFeatures salesProductFeatures = new SalesProductFeatures();
                salesProductFeatures.OrderNo = orderNo;
                salesProductFeatures.CompanyId = companyId;
                salesProductFeatures.LotNumber = lotNumber;
                salesProductFeatures.ProductTypeId = productTypeId;
                salesProductFeatures.FeatureTypeId = Convert.ToInt32(values[1][i][0]);
                salesProductFeatures.FearureId = Convert.ToInt32(values[1][i][1]);
                //transferProductFeatures.UnitId = 0;
                //transferProductFeatures.TxtValue = 0;
                db.SalesProductFeatures.Add(salesProductFeatures);
                db.SaveChanges();
            }

            for (int i = 0; i < values[3].Length; i++)
            {
                SalesProductFeatures salesProductFeatures = new SalesProductFeatures();
                salesProductFeatures.OrderNo = orderNo;
                salesProductFeatures.CompanyId = companyId;
                salesProductFeatures.LotNumber = lotNumber;
                salesProductFeatures.ProductTypeId = productTypeId;
                salesProductFeatures.FeatureTypeId = Convert.ToInt32(values[3][0][0]);
                salesProductFeatures.FearureId = db.Features
                    .FirstOrDefault(x => x.Feature_Typeid == salesProductFeatures.FeatureTypeId).id;
                salesProductFeatures.UnitId = Convert.ToInt32(values[3][0][2]);
                salesProductFeatures.TxtValue = Convert.ToInt32(values[3][0][1]);
                db.SalesProductFeatures.Add(salesProductFeatures);
                db.SaveChanges();
            }





            // Remove Products from ledger


            //all product list
            var Products = (
                from a in db.General_Ledger
                join b in db.Purchase_Ledger on a.trans_ref_id equals b.id
                join c in db.Purchase_Order on b.Purchase_Orderid equals c.id
                join d in db.Products on a.Productid equals d.id
                join e in db.Product_Type on d.Product_Typeid equals e.id
                where a.Transaction_Typeid == 1 && a.is_current == true
                select new
                {
                    GLID = a.id,
                    CompanyId = c.Companyid,
                    WarehouseId = b.Locationid,
                    Product = e.type_name,
                    ProductTypeId = d.Product_Typeid,
                    ProductId = a.Productid,
                    QTY = b.pur_count,
                    Serial = d.product_serial,
                    UnitId = c.Unit_Measurementid
                }
            ).Union(
                from a in db.General_Ledger
                join b in db.Production_Ledger on a.trans_ref_id equals b.id
                join c in db.Production_Indent on b.Production_Indentid equals c.id
                join d in db.Products on a.Productid equals d.id
                join e in db.Product_Type on d.Product_Typeid equals e.id
                join f in db.Machines on c.Machineid equals f.id
                where a.Transaction_Typeid == 2 && a.is_current == true
                select new
                {
                    GLID = a.id,
                    CompanyId = f.Companyid,
                    WarehouseId = b.Locationid,
                    Product = e.type_name,
                    ProductTypeId = d.Product_Typeid,
                    ProductId = a.Productid,
                    QTY = b.prod_count,
                    Serial = d.product_serial,
                    UnitId = c.Unit_Measurementid

                }
            ).Union(
                from a in db.General_Ledger
                join b in db.Transfer_Ledger on a.trans_ref_id equals b.id
                join c in db.Transfer_Order on b.Transfer_Orderid equals c.id
                join d in db.Products on a.Productid equals d.id
                join e in db.Product_Type on d.Product_Typeid equals e.id
                where a.Transaction_Typeid == 4 && a.is_current == true
                select new
                {
                    GLID = a.id,
                    CompanyId = c.to_company_id,
                    WarehouseId = b.Locationid,
                    Product = e.type_name,
                    ProductTypeId = d.Product_Typeid,
                    ProductId = a.Productid,
                    QTY = b.tr_count,
                    Serial = d.product_serial,
                    UnitId = c.Unit_Measurementid
                }
            );

            //exclude if any order exists
            var productsToExclude =
                (from a in db.Consumption_Ledger
                 join b in db.Products on a.Productid equals b.id
                 where b.Product_Typeid == productTypeId
                 select a.Productid).Union(
                    from a in db.Sales_Ledger
                    join b in db.Products on a.Productid equals b.id
                    where b.Product_Typeid == productTypeId
                    select a.Productid).Union(
                    from a in db.Transfer_Ledger
                    join b in db.Products on a.Productid equals b.id
                    where b.Product_Typeid == productTypeId && a.status != "C"
                    select a.Productid).ToList();
            var TempList = Products.Where(x => !productsToExclude.Contains(x.ProductId) && x.CompanyId == companyId && x.WarehouseId == wareHouseId);


            var orderFeatures = db.SalesProductFeatures
                .Where(tpf => tpf.OrderNo == orderNo && tpf.CompanyId==companyId && tpf.LotNumber==lotNumber)
                .Select(tpf => new ProductFeatureList
                {
                    FeatureTypeId = tpf.FeatureTypeId,
                    FeatureId = tpf.FearureId,
                    Value = tpf.TxtValue ?? 0,
                    UnitId = tpf.UnitId ?? 0
                }).ToList();

            List<int> tempProductIdList = TempList.Select(x => x.ProductId).ToList();

            for (int i = 0; i < tempProductIdList.Count; i++)
            {
                int productId = tempProductIdList[i];
                var productFeatures = db.Product_Feature
                    .Where(pf => pf.Productid == productId)
                    .Join(db.Features, pf => pf.Featureid, f => f.id, (pf, f) => new { Feature = f, ProductFeature = pf })
                    .Join(db.Feature_Type, x => x.Feature.Feature_Typeid, ft => ft.id, (x, ft) => new { Feature = x.Feature, ProductFeature = x.ProductFeature, FeatureType = ft })
                    .Select(x => new ProductFeatureList
                    {
                        FeatureTypeId = x.FeatureType.id,
                        FeatureId = x.ProductFeature.Featureid,
                        Value = x.ProductFeature.Value,
                        UnitId = x.ProductFeature.Unit_Measurementid ?? 0
                    }).ToList();

                bool areEqual = orderFeatures.Count == productFeatures.Count
                                && orderFeatures.SelectMany(x => new[] { x.FeatureTypeId, x.FeatureId, x.Value, x.UnitId })
                                    .SequenceEqual(productFeatures.SelectMany(x => new[] { x.FeatureTypeId, x.FeatureId, x.Value, x.UnitId }));


                if (!areEqual)
                {
                    TempList = TempList.Where(x => x.ProductId != productId);
                }

            }



            List<int> productIdList = new List<int>();
            for (int i = 0; i < values[2].Length; i++)
            {
                string productSerial = values[2][i][1];
                var products= db.Products.Where(x => x.product_serial == productSerial).Select(x=>x.id);
                for (int j = 0; j < products.ToList().Count; j++)
                {
                    int item = products.ToList()[j];
               
                    var PID = (
                        from a in db.General_Ledger
                        join b in db.Purchase_Ledger on a.trans_ref_id equals b.id
                        join c in db.Purchase_Order on b.Purchase_Orderid equals c.id
                        where a.Transaction_Typeid == 1 && a.is_current == true && a.Productid == item && b.Locationid==wareHouseId && c.Companyid==companyId
                        select new
                        {
                            FproductId = b.Productid,
                           
                        }
                    ).Union(
                        from a in db.General_Ledger
                        join b in db.Production_Ledger on a.trans_ref_id equals b.id
                        join c in db.Production_Indent on b.Production_Indentid equals c.id
                        join d in db.Machines on c.Machineid equals d.id
                        where a.Transaction_Typeid == 2 && a.is_current == true && a.Productid == item && b.Locationid == wareHouseId && d.Companyid == companyId
                        select new
                        {
                            FproductId = b.Productid,

                        }
                    ).Union(
                        from a in db.General_Ledger
                        join b in db.Transfer_Ledger on a.trans_ref_id equals b.id
                        join c in db.Transfer_Order on b.Transfer_Orderid equals c.id
                        where a.Transaction_Typeid == 4 && a.is_current == true && a.Productid == item && b.Locationid == wareHouseId && c.to_company_id == companyId
                        select new
                        {
                            FproductId = b.Productid,

                        }
                    ).ToList();

                    if (PID.Count != 0)
                    {
                        productIdList.Add(PID.FirstOrDefault().FproductId);
                    }
                }


            }

            var AvailableProductSerial = TempList.Select(x => x.ProductId).ToList();

            if (values[2].Length == productIdList.Count)
            {
                bool allProductPresent = productIdList.All(x => AvailableProductSerial.Contains(x));



                if (allProductPresent)
                {

                    // var salesOrderId = db.Sales_Order.FirstOrDefault(x => x.order_no == orderNo && x.Companyid == companyId).id;

                    List<DuplicateBaleError> duplicateBaleErrors = new List<DuplicateBaleError>(); //value[2].Count, Loop values[2][i]

                    //for (int i = 0; i < values[2].Length; i++)
                    //{


                    //    DuplicateBaleError DuplicateBales = new DuplicateBaleError()
                    //    {
                    //        Id = Convert.ToInt32(values[2][i][0]),
                    //        BaleNumber = values[2][i][1],
                    //        Lot = "1",
                    //        Order = "SO001"
                    //    };
                    //    duplicateBaleErrors.Add(DuplicateBales);
                    //}



                    List<string> missingProducts = new List<string>();
                    // Sales Ledger found and check sales order exists , if exists then set status of Sales Order= C
                    if (db.Sales_Ledger.Include(x => x.Sales_Order).Where(x => x.Sales_Order.order_no == orderNo && x.lot_number != lotNumber && x.Sales_Order.Companyid == companyId).ToList().Count != 0)
                    {
                        var salesOrderId = db.Sales_Ledger.Include(x => x.Sales_Order).Where(x => x.Sales_Order.Companyid == companyId && x.Sales_Order.order_no == orderNo).FirstOrDefault().Sales_Order.id;
                        Sales_Order po = db.Sales_Order.Find(salesOrderId) ?? throw new ArgumentNullException("db.Sales_Order.Find(salesOrderId)");
                        po.status = "C";
                        db.SaveChanges();

                    }
                    if (db.Sales_Ledger.Include(x => x.Sales_Order).Where(x => x.Sales_Order.order_no == orderNo && x.lot_number == lotNumber && x.Sales_Order.Companyid == companyId).ToList().Count != 0)
                    {
                        var salesOrderId = db.Sales_Ledger.Include(x => x.Sales_Order).FirstOrDefault(x => x.lot_number == lotNumber && x.Sales_Order.order_no == orderNo).Sales_Order.id;
                        Sales_Order po = db.Sales_Order.Find(salesOrderId);

                        var productId = db.Sales_Ledger.Include(x => x.Sales_Order).Where(x => x.lot_number == lotNumber && x.Sales_Order.order_no == orderNo).Select(x => x.Productid).ToList();

                        //foreach (var item in productId)
                        //{
                        //    var productFeature = db.Product_Feature.Where(x => x.Productid == item);
                        //    db.Product_Feature.RemoveRange(productFeature);
                        //    db.SaveChanges();

                        //    var salesLedger = db.Sales_Ledger.Where(x => x.Productid == item);
                        //    db.Sales_Ledger.RemoveRange(salesLedger);
                        //    db.SaveChanges();

                        //    var product = db.Products.Where(x => x.id == item);
                        //    db.Products.RemoveRange(product);
                        //    db.SaveChanges();

                        //}

                        if (po.status != "C")
                        {
                            db.Sales_Order.Remove(po);
                            db.SaveChanges();
                        }
                    }

                    Sales_Order salesOrder = new Sales_Order();
                    // First Array Element Order in Front end (Company_Id, Vendor_Id, Product_Type_Id, Total_Count, MainFeature_Id, MainFeature_Value, Main_Unit, Country_Id, Order_No, LC_Number, LC_Date, Purchase_Date, Arrival_Date, Site_Id, Warehouse_Id,Lot_Number)
                    salesOrder.Companyid = Convert.ToInt32(values[0][0][0]);
                    salesOrder.Customerid = Convert.ToInt32(values[0][1][0]);
                    salesOrder.Product_Typeid = Convert.ToInt32(values[0][2][0]);
                    salesOrder.qty = Convert.ToInt32(values[0][3][0]);

                    int featureTypeid = Convert.ToInt32(values[0][4][0]);
                    int featureId = db.Features.FirstOrDefault(x => x.Feature_Typeid == featureTypeid).id;
                    salesOrder.Featureid = featureId;

                    salesOrder.sale_count = Convert.ToDouble(values[0][5][0]);
                    salesOrder.Unit_Measurementid = Convert.ToInt32(values[0][6][0]);
                    salesOrder.Locationid = Convert.ToInt32(values[0][7][0]);
                    salesOrder.order_no = values[0][8][0];
                    salesOrder.sell_date = Convert.ToDateTime(values[0][11][0]);
                    salesOrder.status = "";
                    salesOrder.chged_by = UserManager.FindById(User.Identity.GetUserId()).UserName;
                    salesOrder.chgd_date = DateTime.UtcNow;

                    Sales_Order po1 = db.Sales_Order.FirstOrDefault(x => x.order_no == orderNo);  // Need to test
                    int poid;
                    if (po1 == null)
                    {
                        db.Sales_Order.Add(salesOrder);
                        db.SaveChanges();
                        poid = salesOrder.id;
                    }
                    else if (po1.status != "C")
                    {
                        db.SaveChanges();
                        poid = po1.id;
                    }
                    else
                    {
                        poid = po1.id;
                    }


                    for (int i = 0; i < productIdList.Count; i++)
                    {
                        int productId = productIdList[i];

                        var productInfo = (
                            from a in db.General_Ledger
                            join b in db.Purchase_Ledger on a.trans_ref_id equals b.id
                            join c in db.Purchase_Order on b.Purchase_Orderid equals c.id
                            join p in db.Products on b.Productid equals p.id
                            where a.Transaction_Typeid == 1 && a.is_current == true && a.Productid == productId && b.Locationid == wareHouseId && c.Companyid == companyId
                            select new
                            {
                                id = b.Productid,
                              sl=p.product_serial,
                              qtyval=b.pur_count

                            }
                        ).Union(
                            from a in db.General_Ledger
                            join b in db.Production_Ledger on a.trans_ref_id equals b.id
                            join c in db.Production_Indent on b.Production_Indentid equals c.id
                            join d in db.Machines on c.Machineid equals d.id
                            join p in db.Products on b.Productid equals p.id
                            where a.Transaction_Typeid == 2 && a.is_current == true && a.Productid == productId && b.Locationid == wareHouseId && d.Companyid == companyId
                            select new
                            {
                                id = b.Productid,
                                sl = p.product_serial,
                                qtyval = b.prod_count
                            }
                        ).Union(
                            from a in db.General_Ledger
                            join b in db.Transfer_Ledger on a.trans_ref_id equals b.id
                            join c in db.Transfer_Order on b.Transfer_Orderid equals c.id
                            join p in db.Products on b.Productid equals p.id
                            where a.Transaction_Typeid == 4 && a.is_current == true && a.Productid == productId && b.Locationid == wareHouseId && c.to_company_id == companyId
                            select new
                            {
                                id = b.Productid,
                                sl = p.product_serial,
                                qtyval = b.tr_count

                            }
                        );


                   
                        Sales_Ledger salesLedger = new Sales_Ledger();

                        salesLedger.Productid = productInfo.ToList()[0].id; //n
                        salesLedger.sale_count = productInfo.ToList()[0].qtyval; //n
                        salesLedger.Locationid = Convert.ToInt32(values[0][14][0]); ;
                        salesLedger.delivery_date = Convert.ToDateTime(values[0][12][0]);
                        salesLedger.Sales_Orderid = poid;
                        salesLedger.lot_number = values[0][15][0];
                        salesLedger.status = "";
                        salesLedger.chgd_date = DateTime.UtcNow;
                        salesLedger.chged_by = UserManager.FindById(User.Identity.GetUserId()).UserName;
                        db.Sales_Ledger.Add(salesLedger);
                        db.SaveChanges();


                    }

                }

            }

   


















            return Json("", JsonRequestBehavior.AllowGet);
        }




        [Authorize]
        [HttpPost]
        public JsonResult SubmitData(string[] values)
        {
            var orderNo = values[0];
            var lotNumber = values[1];
            var transTypeId = db.Transaction_Type.FirstOrDefault(x => x.type_code == "SO").id;
            var orderId = db.Sales_Order.FirstOrDefault(x => x.order_no == orderNo).id;
            List<int> salesLedger = db.Sales_Ledger.Include(x => x.Sales_Order).Where(x => x.Sales_Order.order_no == orderNo && x.lot_number == lotNumber).Select(x => x.id).ToList();
            foreach (var items in salesLedger)
            {
                var ledger = db.Sales_Ledger.Find(items);
                ledger.status = "C";
                db.SaveChanges();
                General_Ledger generalLedger = new General_Ledger();
                generalLedger.Productid = ledger.Productid;
                generalLedger.Transaction_Typeid = transTypeId;
                generalLedger.trans_ref_id = ledger.id;
                generalLedger.trans_date = ledger.delivery_date;
                generalLedger.is_current = true;
                generalLedger.chged_by = UserManager.FindById(User.Identity.GetUserId()).UserName;
                generalLedger.chgd_date = DateTime.Now;
                db.General_Ledger.Add(generalLedger);
                db.SaveChanges();
            }
            var salesOrder = db.Sales_Order.Find(orderId);
            if (salesOrder != null) salesOrder.status = "C";
            db.SaveChanges();


            return Json("", JsonRequestBehavior.AllowGet);
        }



        public JsonResult GetProductData(string[][][] values)
        {
            var companyId = Convert.ToInt32(values[0][0][0]);
            var orderNo = values[0][1][0];
            var lot = values[0][2][0];
            var transactionTypeId = db.Transaction_Type.Where(x => x.type_code == "PO").FirstOrDefault().id;
            var productTypeId = Convert.ToInt32(values[0][3][0]);
            if (db.Sales_Ledger.Include(x => x.Sales_Order).Where(x => x.Sales_Order.order_no == orderNo && x.lot_number == lot && x.Sales_Order.Companyid == companyId).ToList().Count != 0)
            {

            }
            else
            {
                if (db.Temp_Feature.Where(x => x.CompanyId == companyId && x.OrderNo == orderNo && x.Lot == lot).ToList().Count != 0)
                {
                    var tempFeatures = db.Temp_Feature.Where(x => x.CompanyId == companyId && x.OrderNo == orderNo && x.Lot == lot).ToList();
                    db.Temp_Feature.RemoveRange(tempFeatures);
                    db.SaveChanges();

                }
                for (int i = 0; i < values[1].Length; i++)
                {
                    Temp_Feature temp_Feature = new Temp_Feature();
                    temp_Feature.CompanyId = companyId;
                    temp_Feature.OrderNo = orderNo;
                    temp_Feature.Lot = lot;
                    temp_Feature.Feature_Typeid = Convert.ToInt32(values[1][i][0]);
                    temp_Feature.Featureid = Convert.ToInt32(values[1][i][1]);
                    temp_Feature.Transaction_Typeid = transactionTypeId;
                    db.Temp_Feature.Add(temp_Feature);
                    db.SaveChanges();

                }
            }

            return Json("", JsonRequestBehavior.AllowGet);
        }



        protected override void Dispose(bool disposing)
        {
            if (disposing)
            {
                db.Dispose();
            }
            base.Dispose(disposing);
        }
    }
}
